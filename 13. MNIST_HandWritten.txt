'''MNIST Handwritten Character Detection using PyTorch, Keras and Tensorflow'''


import tensorflow as tf
from tensorflow.keras.datasets import mnist #contains images of handwritten digit and their label
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.optimizers import Adam

# Load and preprocess the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()
X_train = X_train / 255.0
X_test = X_test / 255.0

# Define the model architecture
model = Sequential([
    Flatten(input_shape=(28, 28)),  # Flatten the 28x28 input images to a 1D array
    Dense(128, activation='relu'),   # Fully connected layer with 128 units and ReLU activation
    Dense(10, activation='softmax')  # Output layer with 10 units for 10 classes and softmax activation
])

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.001), #optimizer is responsible for updating the weights of the neural network based
              loss='sparse_categorical_crossentropy',  # Use sparse categorical cross-entropy for loss function where data is in integer 
              metrics=['accuracy'])
#  loss function is a measure of how well the model is performing.


# Train the model
model.fit(X_train, y_train, batch_size=64, epochs=10, verbose=1)

# Evaluate the model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")
