'''TensorFlow/Pytorch implementation of CNN '''



import tensorflow as tf #The main library for building deep learning models.
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
#A type of model in Keras where layers are stacked sequentially.
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
#adds convolutionallayer , downsampling operation that reduces the dimensionality
# -- of the input by taking the maximum value from a subset of the input data.
# 2d array to 1d arry flatten , indiacates full connected layer (dense)
from tensorflow.keras.utils import to_categorical #convert vector to binary matrix
#keras deep learning library for NN provideAPI for defining and training model

# Load and preprocess the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()
X_train = X_train.reshape(-1, 28, 28, 1) / 255.0
X_test = X_test.reshape(-1, 28, 28, 1) / 255.0
y_train = to_categorical(y_train, num_classes=10)
y_test = to_categorical(y_test, num_classes=10) #target values normalise in binary class matrix

# Build the CNN model
model = Sequential([ # create NN by stacking layer sequentially
    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    #convlutional layer of 3x3 with 32 filter
    MaxPooling2D((2, 2)), #downsample input by taking max 
    Conv2D(64, (3, 3), activation='relu'), #additional layer
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    Flatten(), #2d to 1d vector
    Dense(64, activation='relu'), #fully connected layer with neurons and relu activantion function
    Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, batch_size=64, epochs=1, verbose=1)

# Evaluate the model on test data
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")
